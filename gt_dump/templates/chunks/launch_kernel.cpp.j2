{%- for multistage in context.multistages %}
  template <typename Grid>
  __global__ void {{ multistage.launch_kernel }}(multistage_{{ multistage.id }}_ptrs ptrs, Grid grid) {

      static constexpr const int OffsetLimit = {{ context.offset_limit }};

      using mss_info = multistage_{{ multistage.id }}_info;
      int const nx = grid.i_high_bound() - grid.i_low_bound() + 1;
      int const ny = grid.j_high_bound() - grid.j_low_bound() + 1;

      int const current_block_i_size =
          (blockIdx.x + 1) * helpers::block_i_size < nx ? helpers::block_i_size : nx - blockIdx.x * helpers::block_i_size;
      int const current_block_j_size =
          (blockIdx.y + 1) * helpers::block_j_size < ny ? helpers::block_j_size : ny - blockIdx.y * helpers::block_j_size;

      static constexpr auto jboundary_limit =
          helpers::block_j_size + mss_info::max_stage_extent::jplus() - mss_info::max_stage_extent::jminus();
      static constexpr auto iminus_limit = jboundary_limit + (mss_info::max_stage_extent::iminus() < 0 ? 1 : 0);
      static constexpr auto iplus_limit = iminus_limit + (mss_info::max_stage_extent::iplus() > 0 ? 1 : 0);

      int iblock = mss_info::max_stage_extent::iminus() - 1;
      int jblock = mss_info::max_stage_extent::jminus() - 1;
      if ((int)threadIdx.y < jboundary_limit) {
          iblock = (int)threadIdx.x;
          jblock = (int)threadIdx.y + mss_info::max_stage_extent::jminus();
      } else if ((int)threadIdx.y < iminus_limit) {
          static constexpr int padded_boundary = helpers::get_padded_boundary<-mss_info::max_stage_extent::iminus()>::value;
          iblock = -padded_boundary + (int)threadIdx.x % padded_boundary;
          jblock = mss_info::max_stage_extent::jminus() + (int)threadIdx.x / padded_boundary;
      } else if ((int)threadIdx.y < iplus_limit) {
          static constexpr int padded_boundary = helpers::get_padded_boundary<+mss_info::max_stage_extent::iplus()>::value;
          iblock = helpers::block_i_size + (int)threadIdx.x % padded_boundary;
          jblock = mss_info::max_stage_extent::jminus() + (int)threadIdx.x / padded_boundary;
      }

      {%- if multistage.direction != "backward" %}
        {%- set init_interval = multistage.intervals[0].interval[0] %}
      {%- else %}
        {%- set init_interval = multistage.intervals[-1].interval[1] %}
      {%- endif %}
      ptrs.initialize(iblock, jblock);

      int min_level = grid.template value_at<gt::level<{{ init_interval[0]}}, {{init_interval[1]}}, OffsetLimit>>();
      {%- if multistage.direction == "parallel" %}
        min_level = math::max((int)blockIdx.z * {{ multistage.blocksize }} + (int)grid.k_min(), min_level);
      {%- endif %}
      ptrs.increment_k(min_level);

      if (helpers::in_domain<mss_info::max_stage_extent>(iblock, jblock, current_block_i_size, current_block_j_size))
          ptrs.init_caches();

      {%- for interval in (multistage.intervals if multistage.direction != "backward" else multistage.intervals|reverse) %}
        {
            using from_level = gt::level<{{ interval.interval[0][0] }}, {{ interval.interval[0][1] }}, OffsetLimit>;
            using to_level = gt::level<{{ interval.interval[1][0] }}, {{ interval.interval[1][1] }}, OffsetLimit>;
            int interval_start = grid.template value_at<from_level>();
            int interval_end = grid.template value_at<to_level>();
            {%- if multistage.direction == "parallel" %}
              interval_start = math::max((int)blockIdx.z * {{ multistage.blocksize }}, interval_start);
              interval_end = math::min(((int)blockIdx.z + 1) * {{ multistage.blocksize }} - 1, interval_end);
            {%- endif %}
            for (int z = interval_start; z <= interval_end;
                 ++z, ptrs.increment_k({{ '1' if multistage.direction != "backward" else '-1' }})) {
                {%- if multistage.ij_caches|length > 0 %}
                  __shared__ multistage_{{ multistage.id }}_ij_caches ij_caches;
                {%- endif %}

                if (helpers::in_domain<mss_info::max_stage_extent>(iblock, jblock, current_block_i_size, current_block_j_size))
                    ptrs.fill_caches();

                {% for independent_stage_list in interval.stages %}
                  {%- if not loop.first %}
                    __syncthreads();
                  {%- endif %}
                  {%- for interval_stage in independent_stage_list %}
                    using stage_{{ interval_stage.id }}_extent =
                        multistage_{{ multistage.id }}_info::stage_{{ interval_stage.id }}_{{ interval_stage.name|to_identifier }}::stage_extent;
                    if (helpers::in_domain<stage_{{ interval_stage.id }}_extent>(iblock, jblock, current_block_i_size, current_block_j_size)) {

                        {%- if multistage.ij_caches|length > 0 %}
                          multistage_{{ multistage.id }}_all_ptrs all_ptrs{ptrs, ij_caches, iblock, jblock};
                        {%- else %}
                          multistage_{{ multistage.id }}_all_ptrs all_ptrs{ptrs, iblock, jblock};
                        {%- endif %}
                        auto eval = helpers::eval<multistage_{{ multistage.id }}_all_ptrs,
                            {{ interval_stage.argmap_name }}>{all_ptrs};
                        {{ interval_stage.name }}::apply(eval
                            {%- if interval_stage.overload != "none" -%}
                                , gt::interval<
                                    gt::level<{{ interval.interval[0][0] }}, {{ interval.interval[0][1] }}, OffsetLimit>,
                                    gt::level<{{ interval.interval[1][0] }}, {{ interval.interval[1][1] }}, OffsetLimit>
                                >{}
                            {%- endif %});
                    }
                  {%- endfor %}
                {%- endfor %}

                if (helpers::in_domain<mss_info::max_stage_extent>(iblock, jblock, current_block_i_size, current_block_j_size))
                    ptrs.flush_caches();

                {%- if multistage.ij_caches and multistage.ij_caches|length > 0 %}
                  __syncthreads(); // needed because we have an ij cache
                {%- endif %}
            }
        }
      {%- endfor %}

      if (helpers::in_domain<mss_info::max_stage_extent>(iblock, jblock, current_block_i_size, current_block_j_size))
          ptrs.terminate_caches();
  }
{%- endfor %}
