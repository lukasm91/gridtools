{%- for multistage in context.multistages %}
  class multistage_{{ multistage.id }}_ptrs {
  {%- if multistage|has_kcaches %}
    private:
      {%- if multistage.k_caches|length > 0 %}
        struct k_caches {
            {%- for k_cache in multistage.k_caches %}
              {{ k_cache.type }} arg_{{ 'tmp_' if k_cache.temporary }}{{ k_cache.id }}_[{{ k_cache.max_extent - k_cache.min_extent + 1 }}];
            {%- endfor %}
        } k_caches_;
      {%- endif %}

  {%- endif %}
    public:
      offsets offsets_;
      {%- for kind_id, kind_info in multistage["kinds"]|dictsort %}
        mss_{{ multistage.id }}::kind_{{ kind_id }}_fields kind_{{ kind_id }}_fields_;
      {%- endfor %}
      {%- for arg_id, arg_info in multistage.temporaries.args|dictsort %}
        {%- if not arg_info.local %}
          mss_{{ multistage.id }}::kind_tmp_{{ arg_id }}_fields kind_tmp_{{ arg_id }}_fields_;
        {%- endif %}
      {%- endfor %}

      void check() const noexcept {
          {%- for kind_id, kind_info in multistage["kinds"]|dictsort %}
            kind_{{ kind_id }}_fields_.check();
          {%- endfor %}
          {%- for arg_id, arg_info in multistage.temporaries.args|dictsort %}
            {%- if not arg_info.local %}
              kind_tmp_{{ arg_id }}_fields_.check();
            {%- endif %}
          {%- endfor %}
      }

      GT_FUNCTION void increment_ptr(int const i, int const j, int const k) noexcept {
          {%- for kind_id, kind_info in multistage["kinds"]|dictsort %}
            kind_{{ kind_id }}_fields_.increment_ptr(i, j, k);
          {%- endfor %}
          {%- for arg_id, arg_info in multistage.temporaries.args|dictsort %}
            {%- if not arg_info.local %}
              kind_tmp_{{ arg_id }}_fields_.increment_ptr(i, j, k);
            {%- endif %}
          {%- endfor %}
      }
      GT_FUNCTION void increment(int const i, int const j, int const k) noexcept {
          {%- for kind_id, kind_info in multistage["kinds"]|dictsort %}
            offsets_.increment_{{ kind_id }}(kind_{{ kind_id }}_fields_.si_, i, j, k);
          {%- endfor %}
          {%- for arg_id, arg_info in multistage.temporaries.args|dictsort %}
            {%- if not arg_info.local %}
              offsets_.increment_tmp_{{ arg_id }}(kind_tmp_{{ arg_id }}_fields_.si_, i, j, k);
            {%- endif %}
          {%- endfor %}
      }
      GT_FUNCTION void increment_k(int const k = 1) noexcept {
          increment(0, 0, k);
      }

      GT_FUNCTION void increment_block_ptr(int const nbx, int const nby) {
          // move to block / thread
          {%- for kind_id, kind_info in multistage["kinds"]|dictsort %}
            kind_{{ kind_id }}_fields_.increment_block_ptr(nbx, nby);
          {%- endfor %}
          {%- for arg_id, arg_info in multistage.temporaries.args|dictsort %}
            {%- if not arg_info.local %}
              kind_tmp_{{ arg_id }}_fields_.increment_block_ptr(nbx, nby);
            {%- endif %}
          {%- endfor %}
      }
      {%- if multistage.k_caches|length > 0 %}
        GT_FUNCTION_DEVICE void init_caches() noexcept {
            {%- for k_cache in multistage["k_caches"] %}
              {%- if k_cache.fill %}
                {
                    static constexpr int kcache_start = {{ k_cache.min_extent }};
                    {%- set forward = multistage.direction == "forward" %}
                    int offset;
                    {%- for i in range(k_cache.min_extent, k_cache.max_extent) %}
                      {%- if k_cache.temporary %}
                        offset = offsets_.get_offset_tmp_{{ k_cache.id }}(kind_tmp_{{ k_cache.id }}_fields_.si_, 0, 0, {{ i if forward else i + 1 }});
                        if (kind_tmp_{{ k_cache.id }}_fields_.is_arg_in_bound(offset))
                            k_caches_.arg_tmp_{{ k_cache.id }}_[-kcache_start + {{ i + 1 if forward else i }}] =
                              {{ 'helpers::cuda_ldg' if k_cache.readonly else '*' -}}(kind_tmp_{{ k_cache.id }}_fields_.ptr_ + offset);

                      {%- else %}
                        offset = offsets_.get_offset_{{ k_cache.kind }}(kind_{{ k_cache.kind }}_fields_.si_, 0, 0, {{ i if forward else i + 1 }});
                        if (kind_{{ k_cache.kind }}_fields_.is_arg_in_bound(offset))
                            k_caches_.arg_{{ k_cache.id }}_[-kcache_start + {{ i + 1 if forward else i }}] = 
                              {{ 'helpers::cuda_ldg' if k_cache.readonly else '*' -}}( kind_{{ k_cache.kind }}_fields_.ptr_{{ k_cache.id }}_ + offset);
                      {%- endif %}
                    {%- endfor %}
                }
              {%- endif %}
            {%- endfor %}
        }
        GT_FUNCTION_DEVICE void fill_caches(bool const in_domain) noexcept {
            {%- if multistage.direction == "forward" %}
              // we have forward, so shift downwards
            {%- else %}
              // we have backward, so shift upwards
            {%- endif %}

            {%- for k_cache in multistage["k_caches"] %}
              {%- set forward = multistage.direction == "forward" %}
              {%- set extent_range = range(k_cache.min_extent, k_cache.max_extent)|list %}
              {%- set extent_range = extent_range if forward else extent_range|reverse|list %}
              {%- if extent_range|length > 0 or k_cache.fill %}
                {
                    static constexpr int kcache_start = {{ k_cache.min_extent }};
                    {%- for i in extent_range %}
                      k_caches_.arg_{{ 'tmp_' if k_cache.temporary }}{{ k_cache.id }}_[-kcache_start + {{ i if forward else i + 1 }}] =
                          k_caches_.arg_{{ 'tmp_' if k_cache.temporary }}{{ k_cache.id }}_[-kcache_start + {{ i + 1 if forward else i }}];
                    {%- endfor %}

                    {%- if k_cache.fill %}
                      {%- if k_cache.temporary %}
                        int offset = offsets_.get_offset_tmp_{{ k_cache.id }}(kind_tmp_{{ k_cache.id }}_fields_.si_,
                            0, 0, {{ k_cache.max_extent if forward else k_cache.min_extent }});
                        if (in_domain && kind_tmp_{{ k_cache.id }}_fields_.is_arg_in_bound(offset))
                            k_caches_.arg_tmp_{{ k_cache.id }}_[-kcache_start + {{ k_cache.max_extent if forward else k_cache.min_extent }}] =
                                {{ 'helpers::cuda_ldg' if k_cache.readonly else '*' -}}(kind_tmp_{{ k_cache.id }}_fields_.ptr_ + offset);

                      {%- else %}
                        int offset = offsets_.get_offset_{{ k_cache.kind }}(kind_{{ k_cache.kind }}_fields_.si_,
                            0, 0, {{ k_cache.max_extent if forward else k_cache.min_extent }});
                        if (in_domain && kind_{{ k_cache.kind }}_fields_.is_arg_in_bound(offset))
                            k_caches_.arg_{{ k_cache.id }}_[-kcache_start + {{ k_cache.max_extent if forward else k_cache.min_extent }}] =
                                {{ 'helpers::cuda_ldg' if k_cache.readonly else '*' -}}(kind_{{ k_cache.kind }}_fields_.ptr_{{ k_cache.id }}_ + offset);
                      {%- endif %}
                    {%- endif %}
                }
              {%- endif %}
            {%- endfor %}
        }
        GT_FUNCTION_DEVICE void flush_caches() noexcept {
            {%- for k_cache in multistage.k_caches %}
              {%- if k_cache.flush %}
                {
                    static constexpr int kcache_start = {{ k_cache.min_extent }};
                    {%- set offset = k_cache.min_extent if multistage.direction == "forward" else k_cache.max_extent %}
                    {%- if k_cache.temporary %}
                      int const offset = offsets_.get_offset_tmp_{{ k_cache.id }}(kind_tmp_{{ k_cache.id }}_fields_.si_, 0, 0, {{ offset }});
                      if (kind_tmp_{{ k_cache.id }}_fields_.is_arg_in_bound(offset))
                          *(kind_tmp_{{ k_cache.id }}_fields_.ptr_ + offset) =
                              k_caches_.arg_tmp_{{ k_cache.id }}_[-kcache_start + {{ offset }}];
                    {%- else %}
                      int const offset = offsets_.get_offset_{{ k_cache.kind }}(kind_{{ k_cache.kind }}_fields_.si_, 0, 0, {{ offset }});
                      if (kind_{{ k_cache.kind }}_fields_.is_arg_in_bound(offset))
                          *(kind_{{ k_cache.kind }}_fields_.ptr_{{ k_cache.id }}_ + offset) =
                              k_caches_.arg_{{ k_cache.id }}_[-kcache_start + {{ offset }}];
                    {%- endif %}
                }
              {%- endif %}
            {%- endfor %}
        }
        GT_FUNCTION_DEVICE void terminate_caches() noexcept {
            {%- for k_cache in multistage["k_caches"] %}
              {%- if k_cache.flush and k_cache.min_extent != k_cache.max_extent %}
                {
                    static constexpr int kcache_start = {{ k_cache.min_extent }};
                    {%- set forward = multistage.direction == "forward" %}
                    {{ k_cache.type }}* ptr;
                    {%- for i in range(k_cache.min_extent, k_cache.max_extent) %}
                      {%- if k_cache.temporary %}
                        int const offset = offsets_.get_offset_tmp_{{ k_cache.id }}(kind_tmp_{{ k_cache.id }}_fields_.si_, 0, 0, {{ i if forward else i + 1 }});
                        if (kind_tmp_{{ k_cache.id }}_fields_.is_arg_in_bound(offset))
                            *(kind_tmp_{{ k_cache.id }}_fields_.ptr_ + offset) = k_caches_.arg_tmp_{{ k_cache.id }}_[-kcache_start + {{ i + 1 if forward else i }}];
                      {%- else %}
                        int const offset = offsets_.get_offset_{{ k_cache.kind }}(kind_{{ k_cache.kind }}_fields_.si_, 0, 0, {{ i if forward else i + 1 }});
                        if (kind_{{ k_cache.kind }}_fields_.is_arg_in_bound(offset))
                            *(kind_{{ k_cache.kind }}_fields_.ptr_{{ k_cache.id }}_ + offset) =
                                k_caches_.arg_{{ k_cache.id }}_[-kcache_start + {{ i + 1 if forward else i }}];
                      {%- endif %}
                    {%- endfor %}
                }
              {%- endif %}
            {%- endfor %}
        }
      {%- endif %}

      // resolve for not cached arguments (not temporaries)
      {%- for kind_id, kind_info in multistage.kinds|dictsort %}
        {%- for arg_id, arg_info in kind_info.args|dictsort %}
          {%- if arg_info.cached == None %}
            GT_FUNCTION_DEVICE {{ arg_info.type }} resolve(helpers::arg_identifier<{{ arg_id }}, false>,
                gt::array<int, 3> const& offsets) const noexcept {
                return {{ 'helpers::cuda_ldg' if arg_info.readonly else '*' -}}
                    (kind_{{ kind_id }}_fields_.ptr_{{ arg_id }}_
                    + offsets_.get_offset_{{ kind_id }}(kind_{{ kind_id }}_fields_.si_, offsets[0], offsets[1], offsets[2]));
            }
            {%- if not arg_info.readonly %}
              GT_FUNCTION_DEVICE {{ arg_info.type }}& resolve(helpers::arg_identifier<{{ arg_id }}, false>,
                  gt::array<int, 3> const& offsets) noexcept {
                  return *(kind_{{ kind_id }}_fields_.ptr_{{ arg_id }}_
                      + offsets_.get_offset_{{ kind_id }}(kind_{{ kind_id }}_fields_.si_, offsets[0], offsets[1], offsets[2]));
              }
            {%- endif %}
          {%- endif %}
        {%- endfor %}
      {%- endfor %}

      // resolve for not cached arguments (temporaries)
      {%- for arg_id, arg_info in multistage.temporaries.args|dictsort %}
        {%- if arg_info.cached == None %}
          GT_FUNCTION_DEVICE {{ arg_info.type }} resolve(helpers::arg_identifier<{{ arg_id }}, true>,
              gt::array<int, 3> const& offsets) const noexcept {
              return {{ 'helpers::cuda_ldg' if arg_info.readonly else '*' -}}
                  (kind_tmp_{{ arg_id }}_fields_.ptr_
                  + offsets_.get_offset_tmp_{{ arg_id }}(kind_tmp_{{ arg_id}}_fields_.si_, offsets[0], offsets[1], offsets[2]));
          }
          {%- if not arg_info.readonly %}
            GT_FUNCTION_DEVICE {{ arg_info.type }}& resolve(helpers::arg_identifier<{{ arg_id }}, true>,
                gt::array<int, 3> const& offsets) noexcept {
                return *(kind_tmp_{{ arg_id }}_fields_.ptr_
                    + offsets_.get_offset_tmp_{{ arg_id }}(kind_tmp_{{ arg_id }}_fields_.si_, offsets[0], offsets[1], offsets[2]));
            }
          {%- endif %}
        {%- endif %}
      {%- endfor %}

      // resolve for k caches
      {%- for k_cache in multistage["k_caches"] %}
        GT_FUNCTION_DEVICE {{ k_cache.type }} resolve(helpers::arg_identifier<{{ k_cache.id }}, {{ k_cache.temporary|bool_to_str }}>,
            gt::array<int, 3> const& offsets) const noexcept {
            static constexpr int kcache_start = {{ k_cache.min_extent }};
            static constexpr int kcache_end = {{ k_cache.max_extent }};
            assert(offsets[0] == 0);
            assert(offsets[1] == 0);
            assert(offsets[2] >= kcache_start);
            assert(offsets[2] <= kcache_end);
            return k_caches_.arg_{{ 'tmp_' if k_cache.temporary }}{{ k_cache.id }}_[-kcache_start + offsets[2]];
        }
        {%- if not k_cache.readonly %}
          GT_FUNCTION_DEVICE {{ k_cache.type }}& resolve(helpers::arg_identifier<{{ k_cache.id }}, {{ k_cache.temporary|bool_to_str }}>,
              gt::array<int, 3> const& offsets) noexcept {
              static constexpr int kcache_start = {{ k_cache.min_extent }};
              static constexpr int kcache_end = {{ k_cache.max_extent }};
              assert(offsets[0] == 0);
              assert(offsets[1] == 0);
              assert(offsets[2] >= kcache_start);
              assert(offsets[2] <= kcache_end);
              return k_caches_.arg_{{ 'tmp_' if k_cache.temporary }}{{ k_cache.id }}_[-kcache_start + offsets[2]];
          }
        {%- endif %}
      {%- endfor %}

      multistage_{{ multistage.id }}_ptrs(
          {%- set comma = joiner(", ") %}
          {%- for kind_id, kind_info in multistage.kinds|dictsort %}
            {{- comma() }}mss_{{ multistage.id }}::kind_{{ kind_id }}_fields kind_{{ kind_id }}_fields
          {%- endfor -%}
          {%- for arg_id, arg_info in multistage.temporaries.args|dictsort %}
            {%- if not arg_info.local %}
              {{- comma() }}mss_{{ multistage.id }}::kind_tmp_{{ arg_id }}_fields kind_tmp_{{ arg_id }}_fields
            {%- endif %}
          {%- endfor -%}
          )
          {%- set comma = joiner(", ") %}
          : {% for kind_id, kind_info in multistage.kinds|dictsort %}
              {{- comma() }}kind_{{ kind_id }}_fields_(kind_{{ kind_id }}_fields)
          {%- endfor %}
          {%- for arg_id, arg_info in multistage.temporaries.args|dictsort %}
            {%- if not arg_info.local %}
              {{- comma() }}kind_tmp_{{ arg_id }}_fields_(kind_tmp_{{ arg_id }}_fields)
            {%- endif %}
          {%- endfor -%}{};
  };
{%- endfor %}
