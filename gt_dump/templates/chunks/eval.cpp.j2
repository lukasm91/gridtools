// vi:syntax=cpp

template <typename Ptrs, typename ArgMap>
struct Eval {
    Ptrs& ptrs_;

    template <class Accessor, gt::enable_if_t<Accessor::intent_v == gt::intent::in, int> = 0>
    GT_FUNCTION_DEVICE auto operator()(Accessor const& arg) const
        noexcept GT_AUTO_RETURN(static_cast<const Ptrs&>(ptrs_).resolve(decltype(ArgMap{}(arg)){}, arg));

    template <class Accessor, gt::enable_if_t<Accessor::intent_v == gt::intent::inout, int> = 0>
    GT_FUNCTION_DEVICE auto operator()(Accessor const& arg) const
        noexcept GT_AUTO_RETURN(ptrs_.resolve(decltype(ArgMap{}(arg)){}, arg));

    template <gt::uint_t I>
    GT_FUNCTION_DEVICE auto operator()(gt::global_accessor<I> const& arg) const
        noexcept GT_AUTO_RETURN(ptrs_.resolve(decltype(ArgMap{}(arg)){}));

    template <class Op, class... Ts>
    GT_FUNCTION_DEVICE auto operator()(gt::expr<Op, Ts...> const& arg) const
        noexcept GT_AUTO_RETURN(gt::expressions::evaluation::value(*this, arg));
};
