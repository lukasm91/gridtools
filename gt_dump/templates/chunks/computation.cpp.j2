template<typename Grid>
class generated_computation {
    // all temporary arguments (origin points to allocation, non-origin points to compute domain)
  private:
    {%- for arg_id, arg_info in context.temporaries|dictsort %}
      {%- if not arg_info.local %}
        kind_tmp_{{ arg_id }}_info kind_tmp_{{ arg_id }}_;
        {{ arg_info.type }}* ptr_tmp_{{ arg_id }}_ = nullptr;
        {{ arg_info.type }}* ptr_tmp_{{ arg_id }}_origin_ = nullptr;
      {%- endif %}
    {%- endfor %}

    Grid grid_;

  public:
    generated_computation(Grid const& grid);
    ~generated_computation();
    generated_computation(generated_computation const&) = delete;
    generated_computation(generated_computation&& other)
        : {%- for arg_id, arg_info in context.temporaries|dictsort %}
            {%- if not arg_info.local %}
              kind_tmp_{{ arg_id }}_(other.kind_tmp_{{ arg_id }}_),
              ptr_tmp_{{ arg_id }}_(other.ptr_tmp_{{ arg_id }}_),
              ptr_tmp_{{ arg_id }}_origin_(other.ptr_tmp_{{ arg_id }}_origin_),
            {%- endif %}
          {%- endfor %}
          grid_(other.grid_) {
        {%- for arg_id, arg_info in context.temporaries|dictsort %}
          {%- if not arg_info.local %}
            other.ptr_tmp_{{ arg_id }}_ = other.ptr_tmp_{{ arg_id }}_origin_ = nullptr;
          {%- endif %}
        {%- endfor %}

    }

    void run(
        {%- set comma = joiner(", ") -%}
        {%- for kind_id, kind_info in context.kinds|dictsort %}
          {{- comma() }} const gt::array<int, {{ kind_info.layout|reject("equalto", -1)|list|length }}>& strides_{{ kind_id }}
          {{- comma() }} const gt::array<int, {{ kind_info.layout|reject("equalto", -1)|list|length }}>& dims_{{ kind_id }}
        {%- endfor %}
        {%- for arg_id, arg_info in context.args|dictsort %}
            {{- comma() }} {{- arg_info.type }}{{ ' const' if arg_info.read_only }} *ptr_{{ arg_id }}
        {%- endfor %});
};
template<typename Grid>
generated_computation<Grid>::generated_computation(Grid const& grid)
    : grid_(grid) {

    static constexpr int alignment = 128 / sizeof(double);

    gt::uint_t const nx = grid_.i_high_bound() - grid_.i_low_bound() + 1;
    gt::uint_t const ny = grid_.j_high_bound() - grid_.j_low_bound() + 1;

    gt::uint_t const num_blocks_i = (nx + computation_info::block_i_size - 1) / computation_info::block_i_size;
    gt::uint_t const num_blocks_j = (ny + computation_info::block_j_size - 1) / computation_info::block_j_size;

    static constexpr int i_padded_length = helpers::get_blocked_i_padded_length<computation_info::max_arg_extent, computation_info::block_i_size>::value;
    static constexpr int j_padded_length = helpers::get_blocked_j_padded_length<computation_info::max_arg_extent, computation_info::block_j_size>::value;

    int const k_padded_length = grid_.k_total_length();
    {% for arg_id, arg_info in context.temporaries|dictsort %}
      {%- set comma = joiner(", ") %}
      {%- if not arg_info.local %}
          kind_tmp_{{ arg_id }}_ = {
              {%- if not arg_info|masked(0) %}
                {{- comma() -}}
                (int)i_padded_length *
                {{- '(int)j_padded_length * ' if not arg_info|masked(1) }}
                {{- '(int)k_padded_length * ' if not arg_info|masked(2) }}
                1
              {%- endif %}
              {%- if not arg_info|masked(1) %}
                {{- comma() -}}
                {{- '(int)i_padded_length * ' if not arg_info|masked(0) }}
                (int)j_padded_length *
                {{- '(int)k_padded_length * ' if not arg_info|masked(2) }}
                {{- '(int)num_blocks_i * ' if not arg_info|masked(0) }}
                1
              {%- endif -%}
              {{- comma() -}}
              {{- '(int)i_padded_length * ' if not arg_info|masked(0) }}
              {{- '(int)j_padded_length * ' if not arg_info|masked(1) }}
              {{- '(int)k_padded_length * ' if not arg_info|masked(2) }}
              {{- '(int)num_blocks_i * ' if not arg_info|masked(0) }}
              {{- '(int)num_blocks_j * ' if not arg_info|masked(0) }}
              1
          };
      {%- endif %}
    {%- endfor %}

    auto const initial_i_offset = (-computation_info::max_arg_extent::iminus() + alignment - 1) / alignment * alignment;

    {% for arg_id, arg_info in context.temporaries|dictsort -%}
      {%- if not arg_info.local %}
        if (cudaMalloc((void**)(&ptr_tmp_{{ arg_id }}_origin_),
            {{- 'i_padded_length * ' if not arg_info|masked(0) }}
            {{- 'j_padded_length * ' if not arg_info|masked(1) }}
            {{- 'k_padded_length * ' if not arg_info|masked(2) }}
            {{- 'num_blocks_i * ' if not arg_info|masked(0) }}
            {{- 'num_blocks_j * ' if not arg_info|masked(1) -}}
            sizeof({{ arg_info.type }})
            {{- '+ initial_i_offset' if not arg_info|masked(0) }}) != cudaSuccess)
            throw std::runtime_error("cudaMalloc failed");
      {%- endif %}
    {%- endfor %}
    auto const initial_j_offset = -computation_info::max_arg_extent::jminus();
    {% for arg_id, arg_info in context.temporaries|dictsort -%}
      {%- if not arg_info.local %}
        ptr_tmp_{{ arg_id }}_ = ptr_tmp_{{ arg_id }}_origin_
            {{- '+ initial_i_offset' if not arg_info|masked(0) }}
            {%- if not arg_info|masked(1) %}
              + initial_j_offset {{ '* i_padded_length' if not arg_info|masked(0) }};
            {%- endif %}
      {%- endif %}
    {%- endfor %}
}
template<typename Grid>
generated_computation<Grid>::~generated_computation() {
    {%- for arg_id, arg_info in context.temporaries|dictsort %}
      {%- if not arg_info.local %}
        cudaFree(ptr_tmp_{{ arg_id }}_origin_);
      {%- endif %}
    {%- endfor %}
}
template<typename Grid>
void generated_computation<Grid>::run(
        {%- set comma = joiner(", ") -%}
        {%- for kind_id, kind_info in context.kinds|dictsort %}
          {{- comma() }} const gt::array<int, {{ kind_info.layout|reject("equalto", -1)|list|length }}>& strides_{{ kind_id }}
          {{- comma() }} const gt::array<int, {{ kind_info.layout|reject("equalto", -1)|list|length }}>& dims_{{ kind_id }}
        {%- endfor %}
        {%- for arg_id, arg_info in context.args|dictsort %}
          {{- comma() }} {{ arg_info.type }}{{ ' const' if arg_info.read_only }} *ptr_{{ arg_id }}
        {%- endfor %}) {

    {%- for multistage in context.multistages %}
      {
          {%- for arg_id, arg_info in multistage.temporaries.args|dictsort %}
            {%- if not arg_info.local %}
              multistage_{{ multistage.id }}_ptrs::kind_tmp_{{ arg_id }}_fields kind_tmp_{{ arg_id }}_fields{kind_tmp_{{ arg_id }}_};
              kind_tmp_{{ arg_id }}_fields.ptr_ = ptr_tmp_{{ arg_id }}_;
            {%- endif %}
          {%- endfor %}

          {% for kind_id, kind_info in multistage.kinds|dictsort -%}
            kind_{{ kind_id }}_info kind_{{ kind_id }}_info {strides_{{ kind_id }}, dims_{{ kind_id }}};
            multistage_{{ multistage.id }}_ptrs::kind_{{ kind_id }}_fields kind_{{ kind_id }}_fields{kind_{{ kind_id }}_info};
            {%- for arg_id, arg_info in kind_info.args|dictsort %}
              kind_{{ kind_id }}_fields.ptr_{{ arg_id }}_ = ptr_{{ arg_id }};
            {%- endfor %}
            kind_{{ kind_id }}_fields.increment_ptr(grid_.i_low_bound(), grid_.j_low_bound(), grid_.k_min());
          {%- endfor %}

          multistage_{{ multistage.id }}_ptrs ptrs{
              {%- set comma = joiner(", ") %}
              {%- for kind_id, kind_info in multistage.kinds|dictsort %}
                {{- comma() }}kind_{{ kind_id }}_fields
              {%- endfor -%}
              {%- for arg_id, arg_info in multistage.temporaries.args|dictsort %}
                {%- if not arg_info.local %}
                  {{- comma() }}kind_tmp_{{ arg_id }}_fields
                {%- endif %}
              {%- endfor -%}};
          run_multistage_{{ multistage.id }}(ptrs, grid_);

      }
    {%- endfor %}
}
