{%- if multistage|has_k_caches %}
  class k_caches {
    private:
      {%- for k_cache in multistage.k_caches %}
        {{ k_cache.type }} arg_{{ 'tmp_' if k_cache.temporary }}{{ k_cache.id }}_[{{ k_cache.max_extent - k_cache.min_extent + 1 }}];
      {%- endfor %}

    public:
      GT_FUNCTION_DEVICE void init(ptrs const& ptrs) noexcept {
          {%- for k_cache in multistage["k_caches"] %}
            {%- if k_cache.fill %}
              {
                  static constexpr int kcache_start = {{ k_cache.min_extent }};
                  {%- set forward = multistage.direction == "forward" %}
                  int offset;
                  {%- for i in range(k_cache.min_extent, k_cache.max_extent) %}
                    {%- if k_cache.temporary %}
                      offset = ptrs.offsets_.get_offset_tmp_{{ k_cache.id }}(ptrs.kind_tmp_{{ k_cache.id }}_fields_.si_, 0, 0, {{ i if forward else i + 1 }});
                      if (ptrs.kind_tmp_{{ k_cache.id }}_fields_.is_arg_in_bound(offset))
                          arg_tmp_{{ k_cache.id }}_[-kcache_start + {{ i + 1 if forward else i }}] =
                            {{ 'helpers::cuda_ldg' if k_cache.readonly else '*' -}}(ptrs.kind_tmp_{{ k_cache.id }}_fields_.ptr_ + offset);

                    {%- else %}
                      offset = ptrs.offsets_.get_offset_{{ k_cache.kind }}(ptrs.kind_{{ k_cache.kind }}_fields_.si_, 0, 0, {{ i if forward else i + 1 }});
                      if (ptrs.kind_{{ k_cache.kind }}_fields_.is_arg_in_bound(offset))
                          arg_{{ k_cache.id }}_[-kcache_start + {{ i + 1 if forward else i }}] = 
                            {{ 'helpers::cuda_ldg' if k_cache.readonly else '*' -}}( ptrs.kind_{{ k_cache.kind }}_fields_.ptr_{{ k_cache.id }}_ + offset);
                    {%- endif %}
                  {%- endfor %}
              }
            {%- endif %}
          {%- endfor %}
      }
      GT_FUNCTION_DEVICE void fill(bool const in_domain, ptrs const& ptrs) noexcept {
          {%- if multistage.direction == "forward" %}
            // we have forward, so shift downwards
          {%- else %}
            // we have backward, so shift upwards
          {%- endif %}

          {%- for k_cache in multistage["k_caches"] %}
            {%- set forward = multistage.direction == "forward" %}
            {%- set extent_range = range(k_cache.min_extent, k_cache.max_extent)|list %}
            {%- set extent_range = extent_range if forward else extent_range|reverse|list %}
            {%- if extent_range|length > 0 or k_cache.fill %}
              {
                  static constexpr int kcache_start = {{ k_cache.min_extent }};
                  {%- for i in extent_range %}
                    arg_{{ 'tmp_' if k_cache.temporary }}{{ k_cache.id }}_[-kcache_start + {{ i if forward else i + 1 }}] =
                        arg_{{ 'tmp_' if k_cache.temporary }}{{ k_cache.id }}_[-kcache_start + {{ i + 1 if forward else i }}];
                  {%- endfor %}

                  {%- if k_cache.fill %}
                    {%- if k_cache.temporary %}
                      int offset = ptrs.offsets_.get_offset_tmp_{{ k_cache.id }}(ptrs.kind_tmp_{{ k_cache.id }}_fields_.si_,
                          0, 0, {{ k_cache.max_extent if forward else k_cache.min_extent }});
                      if (in_domain && ptrs.kind_tmp_{{ k_cache.id }}_fields_.is_arg_in_bound(offset))
                          arg_tmp_{{ k_cache.id }}_[-kcache_start + {{ k_cache.max_extent if forward else k_cache.min_extent }}] =
                              {{ 'helpers::cuda_ldg' if k_cache.readonly else '*' -}}(ptrs.kind_tmp_{{ k_cache.id }}_fields_.ptr_ + offset);

                    {%- else %}
                      int offset = ptrs.offsets_.get_offset_{{ k_cache.kind }}(ptrs.kind_{{ k_cache.kind }}_fields_.si_,
                          0, 0, {{ k_cache.max_extent if forward else k_cache.min_extent }});
                      if (in_domain && ptrs.kind_{{ k_cache.kind }}_fields_.is_arg_in_bound(offset))
                          arg_{{ k_cache.id }}_[-kcache_start + {{ k_cache.max_extent if forward else k_cache.min_extent }}] =
                              {{ 'helpers::cuda_ldg' if k_cache.readonly else '*' -}}(ptrs.kind_{{ k_cache.kind }}_fields_.ptr_{{ k_cache.id }}_ + offset);
                    {%- endif %}
                  {%- endif %}
              }
            {%- endif %}
          {%- endfor %}
      }
      GT_FUNCTION_DEVICE void flush(ptrs const& ptrs) noexcept {
          {%- for k_cache in multistage.k_caches %}
            {%- if k_cache.flush %}
              {
                  static constexpr int kcache_start = {{ k_cache.min_extent }};
                  {%- set offset = k_cache.min_extent if multistage.direction == "forward" else k_cache.max_extent %}
                  {%- if k_cache.temporary %}
                    int const offset = ptrs.offsets_.get_offset_tmp_{{ k_cache.id }}(ptrs.kind_tmp_{{ k_cache.id }}_fields_.si_, 0, 0, {{ offset }});
                    if (ptrs.kind_tmp_{{ k_cache.id }}_fields_.is_arg_in_bound(offset))
                        *(ptrs.kind_tmp_{{ k_cache.id }}_fields_.ptr_ + offset) =
                            arg_tmp_{{ k_cache.id }}_[-kcache_start + {{ offset }}];
                  {%- else %}
                    int const offset = ptrs.offsets_.get_offset_{{ k_cache.kind }}(ptrs.kind_{{ k_cache.kind }}_fields_.si_, 0, 0, {{ offset }});
                    if (ptrs.kind_{{ k_cache.kind }}_fields_.is_arg_in_bound(offset))
                        *(ptrs.kind_{{ k_cache.kind }}_fields_.ptr_{{ k_cache.id }}_ + offset) =
                            arg_{{ k_cache.id }}_[-kcache_start + {{ offset }}];
                  {%- endif %}
              }
            {%- endif %}
          {%- endfor %}
      }
      GT_FUNCTION_DEVICE void terminate(ptrs const& ptrs) noexcept {
          {%- for k_cache in multistage["k_caches"] %}
            {%- if k_cache.flush and k_cache.min_extent != k_cache.max_extent %}
              {
                  static constexpr int kcache_start = {{ k_cache.min_extent }};
                  {%- set forward = multistage.direction == "forward" %}
                  {{ k_cache.type }}* ptr;
                  {%- for i in range(k_cache.min_extent, k_cache.max_extent) %}
                    {%- if k_cache.temporary %}
                      int const offset = ptrs.offsets_.get_offset_tmp_{{ k_cache.id }}(ptrs.kind_tmp_{{ k_cache.id }}_fields_.si_, 0, 0, {{ i if forward else i + 1 }});
                      if (ptrs.kind_tmp_{{ k_cache.id }}_fields_.is_arg_in_bound(offset))
                          *(ptrs.kind_tmp_{{ k_cache.id }}_fields_.ptr_ + offset) = arg_tmp_{{ k_cache.id }}_[-kcache_start + {{ i + 1 if forward else i }}];
                    {%- else %}
                      int const offset = ptrs.offsets_.get_offset_{{ k_cache.kind }}(ptrs.kind_{{ k_cache.kind }}_fields_.si_, 0, 0, {{ i if forward else i + 1 }});
                      if (ptrs.kind_{{ k_cache.kind }}_fields_.is_arg_in_bound(offset))
                          *(ptrs.kind_{{ k_cache.kind }}_fields_.ptr_{{ k_cache.id }}_ + offset) =
                              arg_{{ k_cache.id }}_[-kcache_start + {{ i + 1 if forward else i }}];
                    {%- endif %}
                  {%- endfor %}
              }
            {%- endif %}
          {%- endfor %}
      }

      template<bool B = false>
      GT_FUNCTION_DEVICE enable_if_t<B, void> resolve(...) const noexcept;
      template<bool B = false>
      GT_FUNCTION_DEVICE enable_if_t<B, void> resolve_const(...) const noexcept;

      {%- for k_cache in multistage["k_caches"] %}
        GT_FUNCTION_DEVICE {{ k_cache.type }} resolve_const(helpers::arg_identifier<{{ k_cache.id }}, {{ k_cache.temporary|bool_to_str }}>,
            gt::array<int, 3> const& offsets) const noexcept {
            static constexpr int kcache_start = {{ k_cache.min_extent }};
            static constexpr int kcache_end = {{ k_cache.max_extent }};
            assert(offsets[0] == 0);
            assert(offsets[1] == 0);
            assert(offsets[2] >= kcache_start);
            assert(offsets[2] <= kcache_end);
            return arg_{{ 'tmp_' if k_cache.temporary }}{{ k_cache.id }}_[-kcache_start + offsets[2]];
        }
        {%- if not k_cache.readonly %}
          GT_FUNCTION_DEVICE {{ k_cache.type }}& resolve(helpers::arg_identifier<{{ k_cache.id }}, {{ k_cache.temporary|bool_to_str }}>,
              gt::array<int, 3> const& offsets) noexcept {
              static constexpr int kcache_start = {{ k_cache.min_extent }};
              static constexpr int kcache_end = {{ k_cache.max_extent }};
              assert(offsets[0] == 0);
              assert(offsets[1] == 0);
              assert(offsets[2] >= kcache_start);
              assert(offsets[2] <= kcache_end);
              return arg_{{ 'tmp_' if k_cache.temporary }}{{ k_cache.id }}_[-kcache_start + offsets[2]];
          }
        {%- endif %}
      {%- endfor %}
  };
{%- endif %}
